$script:ErrorActionPreference = 'Stop'
$script:WarningPreference     = 'SilentlyContinue'

function new-pscredential
{
  [CmdletBinding()]
  param (
    [parameter(Mandatory=$true,
      ValueFromPipelineByPropertyName=$true)]
    [string]
    $user,

    [parameter(Mandatory=$true,
      ValueFromPipelineByPropertyName=$true)]
    [string]
    $password
  )

  $secpasswd   = ConvertTo-SecureString $password -AsPlainText -Force
  $credentials = New-Object System.Management.Automation.PSCredential ($user, $secpasswd)
  return $credentials
}

$response = @{
  indesiredstate = $false
  rebootrequired = $false
  errormessage   = ''
}

$invokeParams = @{
  Name          = '<%= resource.dscmeta_resource_friendly_name %>'
  Method        = '<%= dsc_invoke_method %>'
  Property      = @{
<% provider.dsc_parameters.each do |p| -%>
    <%- name = p.name.to_s.gsub(/^dsc_/,'')
    if name == 'ensure' && dsc_invoke_method == 'test'
      value = "\'#{resource.parameters[:ensure].default.to_s}\'"
    elsif p.mof_type == 'MSFT_Credential'
      value = "[PSCustomObject]#{format_dsc_value(p.value)} | new-pscredential"
    elsif p.mof_is_embedded? && p.mof_type != 'MSFT_KeyValuePair'
      vals = p.value.is_a?(Hash) ? [p.value] : p.value
      vals = vals.collect do |v|
        "(New-CimInstance -ClassName '#{p.mof_type.gsub('[]','')}' -ClientOnly -Property #{format_dsc_value(v)})"
      end
      value = "[CimInstance[]]@(#{vals.join(',')})"
    else
      value = format_dsc_value(p.value)
    end
    -%>
    <%= name %> = <%= value %>
<% end -%>
  }<% if resource.respond_to?(:dscmeta_module_version) %>
  ModuleName = @{
    ModuleName      = <%= "\"#{vendored_modules_path}/#{resource.dscmeta_module_name}/#{resource.dscmeta_module_name}.psd1\"" %>
    RequiredVersion = <%= "\"#{resource.dscmeta_module_version}\"" %>
  }
<% else %>
  ModuleName = <%= "\"#{resource.dscmeta_module_name}\"" %>
<% end -%>
}

try{
    $result = Invoke-DscResource @invokeParams
}catch{
  $response.errormessage   = $_.Exception.Message
  return ($response | ConvertTo-Json -Compress)
}

# keep the switch for when Test passes back changed properties
switch ($invokeParams.Method) {
  'Test' {
    $response.indesiredstate = $result.InDesiredState
    return ($response | ConvertTo-Json -Compress)
  }
  'Set' {
    $response.indesiredstate = $true
    $response.rebootrequired = $result.RebootRequired
    return ($response | ConvertTo-Json -Compress)
  }
}
