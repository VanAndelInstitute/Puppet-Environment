#!/usr/bin/env ruby
require 'spec_helper'

<%-
def munge_boolean(value)
  return true if value =~ (/^(true|t|yes|y|1)$/i)
  return false if value.empty? || value =~ (/^(false|f|no|n|0)$/i)

  raise ArgumentError.new "invalid value: #{value}"
end
-%>
describe Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>) do

  let :dsc_<%= resource.friendlyname.downcase %> do
    Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => <%= format_type_value(@spec_test_values['string']) %>,
<%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
<%    if property.values -%>
      :dsc_<%= property.name.downcase %> => '<%= property.values.first %>',
<%    else -%>
      :dsc_<%= property.name.downcase %> => <%= format_type_value(@spec_test_values[property.type]) %>,
<%    end -%>
<%  end -%>
    )
  end

  it "should stringify normally" do
    expect(dsc_<%= resource.friendlyname.downcase %>.to_s).to eq("Dsc_<%= resource.friendlyname.downcase %>[<%= @spec_test_values['string'] %>]")
  end
<%  if resource.ensurable? -%>

  it 'should default to ensure => <%= resource.ensure_value %>' do
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq :<%= resource.ensure_value %>
  end
<%  end # resource.ensurable? -%>
<%  resource.properties.each do |property| -%>
<%    if property.credential? -%>

  it "should not accept empty password for dsc_<%= property.name.downcase %>" do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = {"user"=>"user", "password"=>""}}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.credential? -%>
<%    if property.required? -%>

  it 'should require that dsc_<%= property.name.downcase %> is specified' do
    #dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]
    expect { Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => <%= format_type_value(@spec_test_values['string']) %>,
<%      resource.properties.select{|rp| rp.name != property.name}.each do |other_property| -%>
<%        if other_property.values -%>
      :dsc_<%= other_property.name.downcase %> => '<%= other_property.values.first %>',
<%        else -%>
      :dsc_<%= other_property.name.downcase %> => <%= format_type_value(@spec_test_values[other_property.type]) || 'nil' %>,
<%        end # if other_property.values -%>
<%      end # each -%>
    )}.to raise_error(Puppet::Error, /dsc_<%= property.name.downcase %> is a required attribute/)
  end
<%    end # if property.required? -%>
<%    if property.values -%>
<%      property.values.each do |value| -%>

<%    if property.array? -%>
  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(['<%= value %>'])
  end

  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(['<%= value.downcase %>'])
  end
<%    else -%>
  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq('<%= value %>')
  end

  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq('<%= value.downcase %>')
  end
<%    end -%>
<%        if property.name.downcase == 'ensure' -%>

  it 'should accept dsc_ensure predefined value <%= value.downcase %> and update ensure with this value (ensure end value should be a symbol)' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure].downcase.to_sym)
  end
<%        end # if property.name.downcase.... -%>
<%      end # property.values.each....-%>

  it 'should not accept values not equal to predefined values' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = 'invalid value'}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.values -%>
<%    if property.array? -%>
<%      if property.keyvaluepair? -%>

  it 'should accept a hash for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      elsif property.embeddedinstance? -%>

  it 'should accept a hash for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq([<%= format_type_value(@spec_test_values[property.type]) %>])
  end

  it 'should accept a an array of hashes for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = [<%= format_type_value(@spec_test_values[property.type]) %>]
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq([<%= format_type_value(@spec_test_values[property.type]) %>])
  end
<%      elsif property.values -%>

  it 'should accept array of predefined values for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= property.values %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= property.values %>)
  end
<%      else # if property.values -%>

  it 'should accept array for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      end # if property.values -%>
<%    else # if property.array? -%>

  it 'should not accept array for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['string[]']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.array? -%>
<%    if property.bool? -%>

  it 'should accept boolean for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      @spec_test_values['munged_bools'].each do |munged_bool| %>
  it "should accept boolean-like value <%= format_type_value(munged_bool) %> and munge this value to boolean for dsc_<%= property.name.downcase %>" do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_bool) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= munge_boolean(munged_bool.to_s) %>)
  end
<%      end #  @spec_test_values['munged_bools']... -%>
<%    else # if property.bool? -%>

  it 'should not accept boolean for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['boolean']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.bool? -%>
<%    if property.int? || property.int_array? -%>

  it 'should accept int for dsc_<%= property.name.downcase %>' do
<%-       single_int_type = property.type.gsub(/\[\]/,'')
          expected = @spec_test_values[single_int_type]
          expected = [expected] if property.int_array? -%>
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[single_int_type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(expected) %>)
  end
<%      @spec_test_values['munged_ints'].each do |munged_int| -%>

  it 'should accept string-like int for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_int) %>
<%-       expected = property.uint_array? ? [munged_int.to_i] : munged_int.to_i -%>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(expected) %>)
  end
<%      end #  @spec_test_values['munged_ints']... -%>

<%      if property.int_array? -%>

  it 'should accept int[] for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end

  it 'should accept string-like int[] for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['munged_ints']) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values['munged_ints'].map(&:to_i)) %>)
  end
<%      end # if property.int_array? -%>
<%    elsif !property.uint? && !property.uint_array? # if property.int? -%>

  it 'should not accept int for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['int_not_bool_mungeable']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.int? -%>
<%    if property.uint? || property.uint_array? -%>

  it 'should accept uint for dsc_<%= property.name.downcase %>' do
<%-       single_uint_type = property.type.gsub(/\[\]/,'')
          expected = @spec_test_values[single_uint_type]
          expected = [expected] if property.uint_array? -%>
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[single_uint_type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(expected) %>)
  end

  it 'should not accept signed (negative) value for dsc_<%= property.name.downcase %>' do
<%-     signed_type = property.type.gsub(/(u|\[\])/,'')  -%>
    value = <%= format_type_value(@spec_test_values[signed_type]) %>
    expect(value).to be < 0
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = value}.to raise_error(Puppet::ResourceError)
  end
<%      @spec_test_values['munged_uints'].each do |munged_uint| -%>

  it 'should accept string-like uint for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_uint) %>
<%-       expected = property.uint_array? ? [munged_uint.to_i] : munged_uint.to_i -%>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(expected) %>)
  end
<%      end #  @spec_test_values['munged_ints']... -%>
<%      if property.uint_array? -%>

  it 'should accept uint[] for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end

  it 'should accept string-like uint[] for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['munged_uints']) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values['munged_uints'].map(&:to_i)) %>)
  end
<%      end # if property.uint_array? -%>
<%    elsif !property.int? && !property.int_array? # if property.uint? -%>

  it 'should not accept uint for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['uint_not_bool_mungeable']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.uint? -%>
<%  end # resource.properties.each... -%>

  # Configuration PROVIDER TESTS

  describe "powershell provider tests" do

    it "should successfully instanciate the provider" do
      described_class.provider(:powershell).new(dsc_<%= resource.friendlyname.downcase %>)
    end

    before(:each) do
      @provider = described_class.provider(:powershell).new(dsc_<%= resource.friendlyname.downcase %>)
    end
<%  unless ['msft_filedirectoryconfiguration'].include?(resource.name.downcase) -%>
<%    if resource.ps_module.name -%>

    describe "when dscmeta_module_name existing/is defined " do

      it "should compute powershell dsc test script with Invoke-DscResource" do
        expect(@provider.ps_script_content('test')).to match(/Invoke-DscResource/)
      end

      it "should compute powershell dsc test script with method Test" do
        expect(@provider.ps_script_content('test')).to match(/Method\s+=\s*'test'/)
      end

      it "should compute powershell dsc set script with Invoke-DscResource" do
        expect(@provider.ps_script_content('set')).to match(/Invoke-DscResource/)
      end

      it "should compute powershell dsc test script with method Set" do
        expect(@provider.ps_script_content('set')).to match(/Method\s+=\s*'set'/)
      end

    end
<%    end # if resource.ps_module.name -%>
<%  end # unless ['msft_filedirectoryconfiguration'].... -%>
<%  if resource.ensurable? -%>

    describe "when dsc_ensure is '<%= resource.ensure_value %>'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>.original_parameters[:dsc_ensure] = '<%= resource.ensure_value %>'
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = '<%= resource.ensure_value %>'
        @provider = described_class.provider(:powershell).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :<%= resource.ensure_value %>" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:<%= resource.ensure_value %>)
      end

      it "should compute powershell dsc test script in which ensure value is '<%= resource.ensure_value %>'" do
        expect(@provider.ps_script_content('test')).to match(/ensure = '<%= resource.ensure_value %>'/)
      end

      it "should compute powershell dsc set script in which ensure value is '<%= resource.ensure_value %>'" do
        expect(@provider.ps_script_content('set')).to match(/ensure = '<%= resource.ensure_value %>'/)
      end

    end

<%  end # if resource.ensurable? -%>
<%  if resource.absentable? -%>
    describe "when dsc_ensure is '<%= resource.absent_value %>'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>.original_parameters[:dsc_ensure] = '<%= resource.absent_value %>'
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = '<%= resource.absent_value %>'
        @provider = described_class.provider(:powershell).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :<%= resource.absent_value %>" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:<%= resource.absent_value %>)
      end

      it "should compute powershell dsc test script in which ensure value is '<%= resource.ensure_value %>'" do
        expect(@provider.ps_script_content('test')).to match(/ensure = '<%= resource.ensure_value %>'/)
      end

      it "should compute powershell dsc set script in which ensure value is '<%= resource.absent_value %>'" do
        expect(@provider.ps_script_content('set')).to match(/ensure = '<%= resource.absent_value %>'/)
      end

    end
<%  end # if resource.absentable? -%>
<%  if resource.has_credential? -%>

    describe "when dsc_resource has credentials" do

      it "should convert credential hash to a pscredential object" do
        expect(@provider.ps_script_content('test')).to match(/| new-pscredential'/)
      end

    end

<%  end # if resource.has_credential? -%>

  end
end
