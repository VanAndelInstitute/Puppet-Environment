require 'pathname'

Puppet::Type.newtype(:dsc_<%= resource.friendlyname.downcase %>) do
  require Pathname.new(__FILE__).dirname + '../../' + 'puppet/type/base_dsc'
  require Pathname.new(__FILE__).dirname + '../../puppet_x/puppetlabs/dsc_type_helpers'

<%  ignored = ['MSFT_KeyValuePair', 'MSFT_Credential']
    resource.embedded_properties
      .map { |p| p.embeddedinstance_class_name }
      .select { |class_name| !ignored.include?(class_name) }
      .uniq
      .each do |class_name|

    allowed = []
    required = []
    cim_classes_with_path
      .select { |c| c[:klass].name == class_name }
      .first[:klass]
      .features
      .each do |prop|

      name = prop.name.downcase.gsub("'", "\\\\'")
      if prop.qualifiers.any? { |q| q.name.casecmp('Required') == 0 }
        required << "'" + name + "'"
      else
        allowed << "'" + name + "'"
      end
    end
  -%>
    class PuppetX::Dsc::TypeHelpers
      def self.validate_<%= class_name %>(mof_type_map, name, value)
<%# emit required or allowed fields based on embeddedinstance definition -%>
        required = [<%= required.join(',') %>]
        allowed = [<%=  allowed.join(',') %>]
        lowkey_hash = Hash[value.map { |k, v| [k.to_s.downcase, v] }]

        missing = required - lowkey_hash.keys
        unless missing.empty?
          fail "#{name} is missing the following required keys: #{missing.join(',')}"
        end

        extraneous = lowkey_hash.keys - required - allowed
        unless extraneous.empty?
          fail "#{name} includes invalid keys: #{extraneous.join(',')}"
        end

        lowkey_hash.keys.each do |key|
          if lowkey_hash[key]
            validate_mof_type(mof_type_map[key], '<%= class_name %>', key, lowkey_hash[key])
          end
        end
      end
    end
<%  end # def validate_XXX -%>

  @doc = %q{
    The DSC <%= resource.friendlyname%> resource type.
    Automatically generated from
    '<%= resource.relative_mof_path.gsub('import/dsc_resources/','') %>'

    To learn more about PowerShell Desired State Configuration, please
    visit https://technet.microsoft.com/en-us/library/dn249912.aspx.

    For more information about built-in DSC Resources, please visit
    https://technet.microsoft.com/en-us/library/dn249921.aspx.

    For more information about xDsc Resources, please visit
    https://github.com/PowerShell/DscResources.
  }

  validate do
  <%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
    fail('dsc_<%= property.name.downcase %> is a required attribute') if self[:dsc_<%= property.name.downcase %>].nil?
  <%  end -%>
  end

  def dscmeta_resource_friendly_name; '<%= resource.friendlyname %>' end
  def dscmeta_resource_name; '<%= resource.name %>' end
  def dscmeta_module_name; '<%= resource.ps_module.name %>' end
<%  if resource.ps_module.name != 'PSDesiredStateConfiguration' -%>
  def dscmeta_module_version; '<%= resource.ps_module.version %>' end
<%  end -%>

  newparam(:name, :namevar => true ) do
  end

  ensurable do
    newvalue(:exists?) { provider.exists? }
    newvalue(:<%= begin resource.ensure_value rescue 'present' end %>) { provider.create }
<%  if resource.absentable? -%>
    newvalue(:<%= resource.absent_value %>)  { provider.destroy }
<%  end -%>
    defaultto { :<%= begin resource.ensure_value rescue 'present' end %> }
  end

<%  resource.properties.each do |property| -%>
  # Name:         <%= property.name %>
  # Type:         <%= property.type %>
  # IsMandatory:  <%= property.required? ? 'True' : 'False' %>
  # Values:       <%= property.values ? property.values : 'None' %>
  newparam(:dsc_<%= property.name.downcase %><% if property.array? && !property.keyvaluepair? %>, :array_matching => :all<% end %>) do
    def mof_type; '<%= property.type %>' end
    def mof_is_embedded?; <%= property.embeddedinstance? -%> end
<%    if property.embeddedinstance? && !property.credential? && !property.keyvaluepair?

        type_map = {}
        cim_classes_with_path
          .select { |c| c[:klass].name == property.embeddedinstance_class_name }
          .first[:klass]
          .features
          .map { |p| Dsc::Property.new(p) }
          .each do |dsc_prop|

          name = dsc_prop.name.downcase.gsub("'", "\\\\'")
          type_map[name] = { :type => dsc_prop.type }
          type_map[name][:values] = dsc_prop.values if dsc_prop.values
        end
-%>
    def mof_type_map
      <%= type_map.to_s %>
    end
<%    end -%>
    desc "<%= property.name %><% if property.description -%> - <%= property.description %><% end %><% if property.values -%><% unless property.description -%> -<% end %> Valid values are <%= property.values.join(', ') %>.<% end -%>"
<%    if property.required? -%>
    isrequired
<%    end -%>
    validate do |value|
<%    if property.name.downcase == 'ensure' -%>
      resource[:ensure] = value.downcase
<%    end -%>
<%    case -%>
<%    when property.embeddedinstance? && property.embeddedinstance_array? -%>
<%#     an array of keyvaluepairs is a special case as it's really a plain old hashtable -%>
<%      if property.keyvaluepair? -%>
      unless value.kind_of?(Hash)
        fail("Invalid value '#{value}'. Should be a hash")
      end
<%#     otherwise an array of embeddedinstances is an array of hashes -%>
<%      else -%>
      unless value.kind_of?(Array) || value.kind_of?(Hash)
        fail("Invalid value '#{value}'. Should be an array of hashes or a hash")
      end
      (value.kind_of?(Hash) ? [value] : value).each_with_index do |v, i|
        fail "<%= property.name %> value at index #{i} should be a Hash" unless v.is_a? Hash

        PuppetX::Dsc::TypeHelpers.validate_<%= property.embeddedinstance_class_name %>(<%= !property.credential? ? 'mof_type_map, ' : '' %>"<%= property.name %>", v)
      end
<%      end -%>
<%    when property.embeddedinstance? && !property.embeddedinstance_array? -%>
      unless value.kind_of?(Hash)
        fail("Invalid value '#{value}'. Should be a hash")
      end
<%      if property.keyvaluepair? -%>
      fail '<%= property.name %> may only have a single key / value pair' unless value.length == 1
<%      else -%>
      PuppetX::Dsc::TypeHelpers.validate_<%= property.embeddedinstance_class_name %>(<%= !property.credential? ? 'mof_type_map, ' : '' %>"<%= property.name %>", value)
<%      end -%>
<%    when property.array? -%>
<%      if property.int_array? -%>
      unless value.kind_of?(Array) || value.kind_of?(Numeric) || value.to_i.to_s == value
        fail("Invalid value '#{value}'. Should be an integer or an array of integers")
      end
<%      elsif property.uint_array? -%>
      unless value.kind_of?(Array) || (value.kind_of?(Numeric) && value >= 0) || (value.to_i.to_s == value && value.to_i >= 0)
        fail("Invalid value '#{value}'. Should be an integer or an array of integers")
      end
<%      else -%>
      unless value.kind_of?(Array) || value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string or an array of strings")
      end
<%      end -%>
<%    when property.bool? -%>
<%    when property.int? -%>
      unless value.kind_of?(Numeric) || value.to_i.to_s == value
          fail("Invalid value #{value}. Should be a signed Integer")
      end
<%    when property.uint? -%>
      unless (value.kind_of?(Numeric) && value >= 0) || (value.to_i.to_s == value && value.to_i >= 0)
          fail("Invalid value #{value}. Should be a unsigned Integer")
      end
<%    else -%>
      unless value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string")
      end
<%    end -%>
<%    if property.values && property.values.any? -%>
<%      if property.array? -%>
      if value.kind_of?(Array)
        unless ([<%= format_newvalues(property.values) %>] & value).count == value.count
          fail("Invalid value #{value}. Valid values are <%= property.values.join(', ') %>")
        end
      end
      if value.kind_of?(String)
        unless [<%= format_newvalues(property.values) %>].include?(value)
          fail("Invalid value #{value}. Valid values are <%= property.values.join(', ') %>")
        end
      end
<%      else -%>
      unless [<%= format_newvalues(property.values) %>].include?(value)
        fail("Invalid value '#{value}'. Valid values are <%= property.values.join(', ') %>")
      end
<%      end -%>
<%    end -%>
    end
<%  case -%>
<%  when property.bool? -%>
    newvalues(true, false)
<%  end -%>
<%    case -%>
<%    when property.array? && !property.keyvaluepair? -%>
    munge do |value|
<%      if property.embeddedinstance_array? -%>
      value.kind_of?(Hash) ?
        [PuppetX::Dsc::TypeHelpers.munge_embeddedinstance(mof_type_map, value)] :
        value.map { |v| PuppetX::Dsc::TypeHelpers.munge_embeddedinstance(mof_type_map, v) }
<%      elsif (property.int_array? || property.uint_array?) -%>
      v = PuppetX::Dsc::TypeHelpers.munge_integer(value)
      v.is_a?(Array) ? v : Array(v)
<%      else -%>
      Array(value)
<%      end -%>
    end
<%    when property.embeddedinstance? && !property.keyvaluepair? && !property.credential? -%>
    munge do |value|
      PuppetX::Dsc::TypeHelpers.munge_embeddedinstance(mof_type_map, value)
    end
<%    when property.bool? -%>
    munge do |value|
      PuppetX::Dsc::TypeHelpers.munge_boolean(value.to_s)
    end
<%    when (property.int? || property.uint?) -%>
    munge do |value|
      PuppetX::Dsc::TypeHelpers.munge_integer(value)
    end
<%    else -%>
<%    end -%>
  end

<%  end %>
  def builddepends
    pending_relations = super()
    PuppetX::Dsc::TypeHelpers.ensure_reboot_relationship(self, pending_relations)
  end
end

Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).provide :powershell, :parent => Puppet::Type.type(:base_dsc).provider(:powershell) do
  confine :true => (Gem::Version.new(Facter.value(:powershell_version)) >= Gem::Version.new('5.0.10240.16384'))
  defaultfor :operatingsystem => :windows

  mk_resource_methods
end
